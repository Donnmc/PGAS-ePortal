@using System.Net.Http.Json
@using System.Text.Json
@inject UserService UserService
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudDialog Style="width: 300px">
    <DialogContent>
        <MudTextField T="string" @bind-Value="email" Label="PGAS Email" Variant="Variant.Outlined"
                      HelperText="firstname.lastname@pgas.ph"></MudTextField>
        <MudSpacer />
        <MudTextField T="string" @bind-Value="password" Label="Password" InputType="@PasswordInput" Required Variant="Variant.Outlined"
                      Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="@TogglePasswordVisibility"
                      AdornmentAriaLabel="Show Password"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@loginUser">Login</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private readonly string API_URL = APIService.PGASePortalAPI;
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    private int loginAttempts = 0;
    private string? email = "";
    private string? password = "";

    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        isShow = !isShow;
        PasswordInputIcon = isShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordInput = isShow ? InputType.Text : InputType.Password;
    }

    void Submit() => MudDialog?.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog?.Cancel();

    private async Task loginUser()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/eportalUser/login/{email}/{password}");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var eid = await JsonSerializer.DeserializeAsync<UserService.eportalUser>(responseStream, options);

            await UserService.SetCurrentUserAsync(eid);
            Submit();

            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            Snackbar.Add("Logged-in", Severity.Success);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error logging in: {ex.Message}");
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            Snackbar.Add("User does not Exist", Severity.Error);

            loginAttempts++;

            if (loginAttempts >= 3)
            {
                Snackbar.Clear();
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
                Snackbar.Add("Connect with IT Support", Severity.Warning);
            }
        }
    }
}
