@using System.Text.Json
@using Blazored.LocalStorage;
@inject UserService UserService

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid Spacing="3" Class="pa-3">
        <!--User-->
        <!--
        @if (eid?.eid != null)
        {
            <MudItem xs="12">
                <MudStack>
                    <MudStack Row Spacing="1" Class="pl-3" AlignItems="AlignItems.Center">
                        @if (pgasEmployee != null)
                        {
                            <MudAvatar>
                                <MudImage Style="image-rendering: optimizeSpeed"
                                          ObjectFit="ObjectFit.ScaleDown"
                                          Src="@($"https://pgas.ph/hris/Content/images/photos/{eid.eid}.png")"
                                          onerror="this.onerror=null;this.src='Objects/agusan del sur.webp';">
                                </MudImage>
                            </MudAvatar>
                            <MudStack Spacing="0">
                                <MudText Style="font-size: 15px; line-height: 20px; margin-bottom: -5px">
                                    <b>@pgasEmployee.EmployeeName</b>
                                </MudText>
                                <MudText Style="font-size: 12px; line-height: 20px">
                                    @pgasEmployee.Position
                                </MudText>
                            </MudStack>
                        }
                    </MudStack>
                    <MudDivider/>
                </MudStack>
            </MudItem>
        }
        -->

        <!-- Menus -->
        <MudItem xs="12">
            <MudNavMenu Rounded="true"  Margin="Margin.Normal" Color="Color.Primary" >
                <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home" IconColor="Color.Tertiary">Home</MudNavLink>
                <MudNavLink Href="/applications" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Apps" IconColor="Color.Tertiary">Applications</MudNavLink>
                <MudNavLink Href="/phone-directory" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.LocalPhone" IconColor="Color.Tertiary">Phone Directory</MudNavLink>
                <MudNavLink Href="/downloadble-forms" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Download" IconColor="Color.Tertiary">Downloadble Forms</MudNavLink>
                @if (eid?.eid != null)
                {
                    <MudNavLink Href="/employees" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People" IconColor="Color.Tertiary">Employees</MudNavLink>
                    <MudNavLink Href="/praise-message" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ChatBubble" IconColor="Color.Tertiary">Praise Message</MudNavLink>
                    <MudNavGroup Icon="@Icons.Material.Filled.Settings" Title="Admin Settings" IconColor="Color.Tertiary">
                        <MudNavLink Href="/governor-images" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Image" IconColor="Color.Tertiary">Governor Images</MudNavLink>
                        <MudNavLink Href="/external-link" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.OpenInNew" IconColor="Color.Tertiary">External Links</MudNavLink>
                    </MudNavGroup>
                }
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudText Class="mt-3" Typo="Typo.subtitle2">External Links</MudText>
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.OpenInNew"></MudIcon>
                </MudStack>
                <MudDivider />
                <!-- Dynamic External nav menu -->
                @if (externalLinks != null && externalLinks.Any())
                {
                    <MudVirtualize Items="externalLinks" Context="parentlink">
                        @if (!string.IsNullOrEmpty(parentlink?.Parent_List_Link))
                        {
                            <MudNavLink Href="@parentlink?.Parent_List_Link" Target="_blank" Match="NavLinkMatch.Prefix" Icon="@GetIcon(parentlink?.Parent_List_Icon ?? "")" IconColor="Color.Tertiary">@parentlink?.Parent_List_Name</MudNavLink>
                        }
                        else
                        {
                            <MudNavGroup Title="@parentlink?.Parent_List_Name" Icon="@GetIcon(parentlink?.Parent_List_Icon ?? "")" Expanded="false" IconColor="Color.Tertiary">
                                <MudVirtualize Items="parentlink?.v_external_linkChildList" Context="childlink">
                                    @if (!string.IsNullOrEmpty(childlink?.Child_List_Name))
                                {
                                    DateTime currentDate = DateTime.UtcNow;
                                    DateTime oneMonthAgo = currentDate.AddMonths(-1);
                                    if (childlink.Child_List_Date_Created > oneMonthAgo)
                                    {
                                        <MudNavLink Href="@childlink.Child_List_Link" Target="_blank" Match="NavLinkMatch.Prefix" Icon="@GetIcon(childlink?.Child_List_Icon ?? "")" IconColor="Color.Tertiary">
                                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                                @childlink?.Child_List_Name
                                                <MudChip T="string" Class="pa-2 ma-0" Style="@($"color:{Colors.Shades.Black}; background:{Colors.Yellow.Default}")" Size="Size.Small">New</MudChip>
                                            </MudStack>
                                        </MudNavLink>
                                    }
                                    else
                                    {
                                        <MudNavLink Href="@childlink?.Child_List_Link" Target="_blank" Match="NavLinkMatch.Prefix" Icon="@GetIcon(childlink?.Child_List_Icon ?? "")" IconColor="Color.Tertiary">@childlink?.Child_List_Name</MudNavLink>
                                    }
                                }
                            </MudVirtualize>
                        </MudNavGroup>
                        }
                    </MudVirtualize>
                }
                else
                {
                    <MudStack Class="pl-5 pt-2" Spacing="2">
                        <MudSkeleton Width="50%" />
                        <MudSkeleton Width="35%" />
                        <MudSkeleton Width="60%" />
                        <MudSkeleton Width="57%" />
                        <MudSkeleton Width="80%" />
                    </MudStack>
                }
            </MudNavMenu>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private readonly string API_URL = APIService.PGASPortalAPI;
    private List<v_external_linkParentListDTO>? externalLinks;
    private ePortal_employee? pgasEmployee;
    private UserService.eportalUser? eid;

    public class v_external_linkParentListDTO
    {
        public string? Parent_List_Name { get; set; }
        public string? Parent_List_Icon { get; set; }
        public string? Parent_List_Link { get; set; }
        public DateTime? Parent_List_Date_Created { get; set; }
        public int? Parent_List_Order { get; set; }
        public List<v_external_linkChildListDTO>? v_external_linkChildList { get; set; }
    }

    public class v_external_linkChildListDTO
    {
        public string? Child_List_Name { get; set; }
        public string? Child_List_Link { get; set; }
        public string? Child_List_Icon { get; set; }
        public DateTime? Child_List_Date_Created { get; set; }
        public int? Child_List_Order { get; set; }
    }

    public partial class ePortal_employee
    {
        public long? eid { get; set; }
        public string? SwipeID { get; set; }
        public string? OfficeName { get; set; }
        public string? OfficeAbbr { get; set; }
        public string? EmployeeName { get; set; }
        public string? Position { get; set; }
        public int? SG { get; set; }
        public string? Status { get; set; }
        public bool? isactive { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        UserService.OnUserChanged += UpdateUser;
        await UpdateUserAsync();
        await GetExternalLinks();
    }

    private async Task UpdateUserAsync()
    {
        eid = await UserService.GetCurrentUserAsync();
        await SelectEmployee();
        StateHasChanged();
    }

    private void UpdateUser()
    {
        // Calling the async method from a non-async method
        _ = UpdateUserAsync();
    }

    private async Task GetExternalLinks()
    {
        try
        {
            using var httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/external_link");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            externalLinks = await JsonSerializer.DeserializeAsync<List<v_external_linkParentListDTO>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task SelectEmployee()
    {
        try
        {
            if (eid?.eid != null)
            {
                using HttpClient httpClient = new HttpClient();
                HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/ePortal_employee/id/{eid?.eid}");
                httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

                string jsonResponse = await httpResponse.Content.ReadAsStringAsync();
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                pgasEmployee = JsonSerializer.Deserialize<ePortal_employee>(jsonResponse, options);
            }
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        catch (JsonException jsonEx)
        {
            // Handle JSON deserialization errors
            Console.WriteLine($"JSON error: {jsonEx.Message}");
        }
    }

    private string GetIcon(string iconName)
    {
        if (string.IsNullOrEmpty(iconName))
        {
            return string.Empty; // Return an empty string if the icon name is null or empty
        }

        // Attempt to get the icon from Icons.Custom.FileFormats
        var customIconType = typeof(Icons.Custom.FileFormats);
        var customIconField = customIconType.GetField(iconName);
        if (customIconField != null)
        {
            var customIconValue = customIconField.GetValue(null) as string;
            if (!string.IsNullOrEmpty(customIconValue))
            {
                return customIconValue;
            }
        }

        // Attempt to get the icon from Icons.Material.Filled
        var materialIconType = typeof(Icons.Material.Filled);
        var materialIconField = materialIconType.GetField(iconName);
        if (materialIconField != null)
        {
            var materialIconValue = materialIconField.GetValue(null) as string;
            if (!string.IsNullOrEmpty(materialIconValue))
            {
                return materialIconValue;
            }
        }

        // Return a default icon or empty string if not found
        return string.Empty;
    }
}
