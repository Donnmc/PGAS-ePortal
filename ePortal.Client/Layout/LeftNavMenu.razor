@using System.Text.Json
@inject UserService UserService

<MudGrid Spacing="2">
    @if (UserService.eid.HasValue)
    {
        <MudItem xs="12">
            <MudStack Class="pl-3 pr-3">
                <MudStack Row Spacing="1" Class="pl-3" AlignItems="AlignItems.Center">
                    @if (pgasEmployee != null)
                    {
                        <MudAvatar Variant="Variant.Outlined" Class="mud-border-dark">
                            <MudImage Style="image-rendering: optimizeSpeed"
                                      ObjectFit="ObjectFit.ScaleDown"
                                      Src="@($"https://pgas.ph/hris/Content/images/photos/{UserService.eid}.png")"
                                      onerror="this.onerror=null;this.src='Objects/agusan del sur.webp';">
                            </MudImage>
                        </MudAvatar>
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.subtitle1" Style="font-size: 12px; margin-bottom: -5px; margin-top: -5px">
                                <b>@pgasEmployee.EmpName</b>
                            </MudText>
                            <MudText Typo="Typo.subtitle1" Style="font-size: 10px; margin-bottom: -5px">
                                @pgasEmployee.Position
                            </MudText>
                            <MudText Typo="Typo.subtitle1" Style="font-size: 10px; margin-bottom: -5px">
                                @pgasEmployee.OfficeAbbr
                            </MudText>
                        </MudStack>
                    }
                </MudStack>
                <MudDivider Class="mud-border-dark" />
            </MudStack>
        </MudItem>
    }
    <!-- Menus -->
    <MudItem xs="12">
        <MudNavMenu Rounded="true" Margin="Margin.Normal" Class="ml-3 mr-3 pa-0" Dense="true">
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Tertiary">Dashboard</MudNavLink>
            <MudNavLink Href="/employees" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People" IconColor="Color.Tertiary">Employees</MudNavLink>
            <MudNavLink Href="/phone-directory" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.LocalPhone" IconColor="Color.Tertiary">Phone Directory</MudNavLink>
            <MudNavLink Href="/praise-message" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ChatBubble" IconColor="Color.Tertiary">Praise Message</MudNavLink>
            <MudNavLink Href="/bible-verse" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.MenuBook" IconColor="Color.Tertiary">Bible Verses</MudNavLink>
            <MudNavLink Href="/files" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Folder" IconColor="Color.Tertiary">Files</MudNavLink>

            <MudText Class="mt-3" Typo="Typo.subtitle2">External Links</MudText>
            <MudDivider Class="mud-border-dark" />
            <!-- Dynamic External nav menu -->
            @if (externalLinks != null && externalLinks.Any())
            {
                @foreach (var parentlink in externalLinks)
                {
                    if (!string.IsNullOrEmpty(parentlink.Parent_List_Link))
                    {
                        <MudNavLink Href="@parentlink.Parent_List_Link" Target="_blank" Match="NavLinkMatch.Prefix" Icon="@(typeof(Icons.Material.Filled).GetField(parentlink.Parent_List_Icon)?.GetValue(null) as string)" IconColor="Color.Tertiary">@parentlink.Parent_List_Name</MudNavLink>
                    }
                    else
                    {
                        <MudNavGroup Title="@parentlink.Parent_List_Name" Icon="@Icons.Material.Filled.Settings" Expanded="false" IconColor="Color.Tertiary">
                            @foreach (var childlink in parentlink.v_external_linkChildList)
                            {
                                if (!string.IsNullOrEmpty(childlink.Child_List_Name))
                                {
                                    DateTime currentDate = DateTime.UtcNow;
                                    DateTime oneMonthAgo = currentDate.AddMonths(-2);
                                    if (childlink.Child_List_Date_Created > oneMonthAgo)
                                    {
                                        <MudNavLink Href="@childlink.Child_List_Link" Target="_blank" Match="NavLinkMatch.Prefix" Icon="@(typeof(Icons.Material.Filled).GetField(childlink.Child_List_Icon)?.GetValue(null) as string)" IconColor="Color.Tertiary">
                                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                                @childlink.Child_List_Name
                                                <MudChip Class="pa-2 ma-0" Style="@($"color:{Colors.Shades.Black}; background:{Colors.Yellow.Default}")" Size="Size.Small">New</MudChip>
                                            </MudStack>
                                        </MudNavLink>
                                    }
                                    else
                                    {
                                        <MudNavLink Href="@childlink.Child_List_Link" Target="_blank" Match="NavLinkMatch.Prefix" Icon="@(typeof(Icons.Material.Filled).GetField(childlink.Child_List_Icon)?.GetValue(null) as string)" IconColor="Color.Tertiary">@childlink.Child_List_Name</MudNavLink>
                                    }
                                }
                            }
                        </MudNavGroup>
                    }
                }
            }
            else
            {
                <MudStack Class="pl-5 pt-2" Spacing="2">
                    <MudSkeleton Width="50%" />
                    <MudSkeleton Width="35%" />
                    <MudSkeleton Width="60%" />
                    <MudSkeleton Width="57%" />
                    <MudSkeleton Width="80%" />
                </MudStack>
            }
        </MudNavMenu>
    </MudItem>
</MudGrid>

@code {
    private const string API_URL = "https://localhost:7049";
    private List<v_external_linkParentListDTO>? externalLinks;
    private m_vwGetAllEmployee_MinifiedDTO? pgasEmployee;

    public class v_external_linkParentListDTO
    {
        public string? Parent_List_Name { get; set; }
        public string? Parent_List_Icon { get; set; }
        public string? Parent_List_Link { get; set; }
        public DateOnly? Parent_List_Date_Created { get; set; }
        public int? Parent_List_Order { get; set; }
        public List<v_external_linkChildListDTO>? v_external_linkChildList { get; set; }
    }

    public class v_external_linkChildListDTO
    {
        public string? Child_List_Name { get; set; }
        public string? Child_List_Link { get; set; }
        public string? Child_List_Icon { get; set; }
        public DateTime? Child_List_Date_Created { get; set; }
        public int? Child_List_Order { get; set; }
    }

    public class m_vwGetAllEmployee_MinifiedDTO
    {
        // Office
        public string? OfficeName { get; set; }
        public string? OfficeAbbr { get; set; }
        // Employee Details
        public string? EmpName { get; set; }
        public long? eid { get; set; }
        public string? SwipeID { get; set; }
        public string? Position { get; set; }
        public int? SG { get; set; }
        public string? Status { get; set; }
        public bool? isactive { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await UserService.LoadUserSession();
        UserService.OnChange += StateHasChanged;
        if (UserService.eid.HasValue)
        {
            await SelectEmployee();
        }
        await GetExternalLinks();
    }

    public void Dispose()
    {
        UserService.OnChange -= StateHasChanged;
    }

    private async Task GetExternalLinks()
    {
        try
        {
            using var httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/v_external_link");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            externalLinks = await JsonSerializer.DeserializeAsync<List<v_external_linkParentListDTO>>(responseStream, options);

            Console.WriteLine("External links fetched successfully.");
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task SelectEmployee()
    {
        if (UserService.eid.HasValue)
        {
            try
            {
                using HttpClient httpClient = new HttpClient();
                HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/m_vwGetAllEmployee_Minified/{UserService.eid}");
                httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

                using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var employee = await JsonSerializer.DeserializeAsync<m_vwGetAllEmployee_MinifiedDTO>(responseStream, options);

                if (employee != null)
                {
                    pgasEmployee = employee;
                    Console.WriteLine("Employee data fetched successfully.");
                }
                else
                {
                    Console.WriteLine("Error: No employee found.");
                }
            }
            catch (HttpRequestException ex)
            {
                // Handle exception, log, or display an error message
                Console.WriteLine($"Error fetching data: {ex.Message}");
            }
        }
    }
}
