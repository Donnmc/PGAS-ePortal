@using System.Net.Http
@using System.Text.Json
@using MudBlazor.Utilities
@using System.Threading.Tasks
@using Blazored.LocalStorage;
@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject UserService UserService
@inject NavigationManager Navigation

<MudThemeProvider Theme="PGASTheme" @bind-IsDarkMode="@isDarkMode" DefaultScrollbar="true" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudContainer MaxWidth="MaxWidth.False">
        <MudAppBar Elevation="0">
            <MudStack Row AlignItems="AlignItems.Center">
                <MudImage Fluid="true" Width="50" Src="Objects/Agusan del Sur Logo.webp"></MudImage>
                <MudText>PGAS Portal</MudText>
            </MudStack>
            <MudSpacer />
            <MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Spacing="3">
                <!-- Notification -->
                <MudStack>
                    <MudBadge Visible="@((hasTodayRecord == true) ? true: false)" Dot Color="Color.Error" Overlap>
                        <MudIconButton Class="pa-1" Icon="@Icons.Material.Filled.Notifications" OnClick="ToggleOpenNotification" Color="Color.Tertiary" />
                    </MudBadge>
                    <MudPopover Open="_open" Style="width: 300px; transform: translateX(30px)" Class="py-2 pl-2" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight" Paper Elevation="2">
                        <MudGrid Spacing="2">
                            <!-- Announcement Header -->
                            <MudItem xs="12">
                                <MudText Align="Align.Center"><b>Announcements</b></MudText>
                                <MudDivider />
                                @{
                                    DateTime currentDate = DateTime.UtcNow;
                                    string currentMonthYear = currentDate.ToString("MMMM, yyyy");
                                }
                                <MudText Style="font-size: 11px" Align="Align.Center">Month of @currentMonthYear</MudText>
                            </MudItem>
                            <!-- Announcement Lists -->
                            <MudItem xs="12">
                                <MudStack Style="height: 50vh;" Class="overflow-auto flex-nowrap pr-2">
                                    @if (announcementForTheMonth != null && announcementForTheMonth.Any())
                                    {
                                        DateTime currentDate = DateTime.UtcNow;
                                        DateTime today = currentDate.AddDays(-1);
                                        DateTime afterYesterday = currentDate.AddDays(-2);

                                        <MudGrid Justify="Justify.Center" Spacing="3" Class="pa-1">
                                            <MudVirtualize Items="announcementForTheMonth" Context="announcement">
                                                @if (announcement.docdate > today)
                                                {
                                                    <MudItem xs="12">
                                                        <MudLink Href="@("https://pgas.ph/dts/public/read?docid="+announcement.docid)" Target="_blank" Underline="Underline.None">
                                                            <MudPaper Class="pa-3">
                                                                <MudStack Spacing="2" Wrap="Wrap.NoWrap" Style="width: 100%">
                                                                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                                                                        <MudStack Spacing="0" Style="width: 100%">
                                                                            <MudText Typo="Typo.body2"><b>@announcement.doctype</b></MudText>
                                                                            <MudStack Row Spacing="2">
                                                                                <MudText Style="font-size: 10px">@(announcement.docdate?.ToString("MMMM dd, yyyy") ?? "No Date")</MudText>
                                                                                <MudText Style="font-size: 10px" Color="Color.Primary">(New)</MudText>
                                                                            </MudStack>
                                                                        </MudStack>
                                                                        <MudIcon Icon="@Icons.Material.Filled.Attachment" Color="Color.Primary" />
                                                                    </MudStack>
                                                                    <MudDivider />
                                                                    <MudStack Spacing="2" Class="pt-2" AlignItems="AlignItems.Start">
                                                                        <MudTooltip Style="max-width: 300px" Arrow Placement="Placement.Top" Text="@announcement.title">
                                                                            <MudText Typo="Typo.body1" Style="font-size: 14px">@TruncateText(announcement?.title ?? "", 150)</MudText>
                                                                        </MudTooltip>
                                                                        <MudTooltip Style="max-width: 300px" Arrow Placement="Placement.Top" Text="@announcement.description">
                                                                            <MudText Typo="Typo.body2" Style="font-size: 12px; font-style: italic">@TruncateText(announcement?.description ?? "", 100)</MudText>
                                                                        </MudTooltip>
                                                                    </MudStack>
                                                                </MudStack>
                                                            </MudPaper>
                                                        </MudLink>
                                                    </MudItem>
                                                }
                                                else
                                                {
                                                    <MudItem xs="12">
                                                        <MudLink Href="@("https://pgas.ph/dts/public/read?docid="+announcement.docid)" Target="_blank" Underline="Underline.None">
                                                            <MudPaper Class="pa-3" Style="scrollbar-gutter: stable" Outlined>
                                                                <MudStack Spacing="2" Wrap="Wrap.NoWrap" Style="width: 100%">
                                                                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                                                                        <MudStack Spacing="0" Style="width: 100%">
                                                                            <MudText Typo="Typo.body2"><b>@announcement.doctype</b></MudText>
                                                                            <MudStack Row Spacing="2">
                                                                                <MudText Style="font-size: 10px">@(announcement.docdate?.ToString("MMMM dd, yyyy") ?? "No Date")</MudText>
                                                                                @if (announcement.docdate > afterYesterday)
                                                                                {
                                                                                    <MudText Style="font-size: 10px" Color="Color.Secondary">(Yesterday)</MudText>
                                                                                }
                                                                                else
                                                                                {
                                                                                    var daySum = (currentDate - announcement.docdate)!.Value.Days;
                                                                                    string days = daySum.ToString();
                                                                                    <MudText Style="font-size: 10px" Color="Color.Secondary">(@days days ago)</MudText>
                                                                                }
                                                                            </MudStack>
                                                                        </MudStack>
                                                                        <MudIcon Icon="@Icons.Material.Filled.Attachment" Color="Color.Secondary" />
                                                                    </MudStack>
                                                                    <MudDivider />
                                                                    <MudStack Spacing="2" Class="pt-2" AlignItems="AlignItems.Start">
                                                                        <MudTooltip Style="max-width: 300px" Arrow Placement="Placement.Top" Text="@announcement.title">
                                                                            <MudText Typo="Typo.body1" Style="font-size: 14px">@TruncateText(announcement?.title ?? "", 150)</MudText>
                                                                        </MudTooltip>
                                                                        <MudTooltip Style="max-width: 300px" Arrow Placement="Placement.Top" Text="@announcement.description">
                                                                            <MudText Typo="Typo.body2" Style="font-size: 12px; font-style: italic">@TruncateText(announcement?.description ?? "", 100)</MudText>
                                                                        </MudTooltip>
                                                                    </MudStack>
                                                                </MudStack>
                                                            </MudPaper>
                                                        </MudLink>
                                                    </MudItem>
                                                }
                                            </MudVirtualize>
                                        </MudGrid>
                                    }
                                    else
                                    {
                                        <MudText Align="Align.Center">No announcement posted yet.</MudText>
                                    }
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudPopover>
                </MudStack>
                <MudToggleIconButton Class="pa-1" @bind-Checked="@isDarkMode" Color="Color.Primary" ToggledColor="Color.Primary" ToggledChanged="ToggleDarkMode"
                                     Icon="@Icons.Material.Filled.LightMode" ToggledIcon="@Icons.Material.Filled.DarkMode" />
                @if (eid?.eid != null)
                {
                    <MudAvatar Size="Size.Medium" Variant="Variant.Filled">
                        <MudImage Class="cursor-pointer"
                                  ObjectFit="ObjectFit.Cover"
                                  Style="image-rendering: optimizeSpeed; image-resolution: from-image 50dpi;"
                                  Src="@($"https://pgas.ph/hris/Content/images/photos/{eid.eid}.png")"
                                  onerror="this.onerror=null;this.src='Objects/agusan del sur.webp';"
                                  @onclick="OpenUserDialog">
                        </MudImage>
                    </MudAvatar>
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" OnClick="OpenLoginDialog">Sign in</MudButton>
                }
            </MudStack>
        </MudAppBar>
        <MudDrawer @bind-Open="@openleft" Elevation="0" ClipMode="DrawerClipMode.Docked">
            <LeftNavMenu />
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudContainer>
</MudLayout>

@code {
    private bool _open;

    private void ToggleOpenNotification() => _open = !_open;
    private void ToggleOpenApplications() => _open = !_open;

    bool openleft = true;
    bool openright = true;

    void ToggleDrawerLeft()
    {
        openleft = !openleft;
        openright = false;
    }

    private UserService.eportalUser? eid;
    private bool isDarkMode = false;
    private MudTheme PGASTheme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Primary = Colors.Blue.Default,
                Secondary = Colors.Yellow.Darken3,
                Tertiary = Colors.Gray.Darken3,
                Background = "#F5F6F7",
                AppbarBackground = Colors.Shades.White,
                DrawerBackground = "#F5F6F7",
                TextSecondary = Colors.Gray.Lighten1,
                AppbarText = Colors.Gray.Darken3,
                DrawerText = Colors.Gray.Darken3,
                DrawerIcon = Colors.Gray.Darken3,
                Surface = Colors.Shades.White,                
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Yellow.Darken3,
                Secondary = Colors.Blue.Default,
                Tertiary = Colors.Gray.Lighten3,
                Background = "#121212",
                AppbarText = Colors.Gray.Lighten3,
                AppbarBackground = "#212121",
                DrawerBackground = "#121212",
                DrawerText = Colors.Gray.Lighten3,
                DrawerIcon = Colors.Gray.Lighten3,
                Surface = "#212121",

            },
            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "270px",
            }
        };

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => { openleft = true; });
        await Task.Run(() => { openright = true; });
        UserService.OnUserChanged += UpdateUser;
        await UpdateUserAsync();
        isDarkMode = await UserService.GetDarkModeAsync();
        UserService.OnThemeChanged += HandleThemeChangedAsync;
        timer = new Timer(async _ => await officeViewAnnouncementsForTheMonth(), null, TimeSpan.Zero, TimeSpan.FromMinutes(5)); // Set to refresh every 5 minute
        try
        {
            await officeViewAnnouncementsForTheMonth();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        finally
        {
            await base.OnInitializedAsync();
        }
    }

    private async Task ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        await UserService.SetDarkModeAsync(isDarkMode);
    }

    private async Task HandleThemeChangedAsync()
    {
        isDarkMode = await UserService.GetDarkModeAsync(); // Ensure state is updated
        StateHasChanged();
    }

    public void Dispose()
    {
        UserService.OnThemeChanged -= HandleThemeChangedAsync;
    }

    private void NavigateTo(string url)
    {
        Navigation.NavigateTo(url);
    }

    private async Task UpdateUserAsync()
    {
        eid = await UserService.GetCurrentUserAsync();
        StateHasChanged();
    }

    private void UpdateUser()
    {
        _ = UpdateUserAsync();
    }

    private void OpenLoginDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Dialogues.Login>("", options);
    }

    private void OpenUserDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Dialogues.UserPanel>("", options);
    }

    private readonly string API_URL = APIService.PGASPortalAPI;
    private List<t_doc_office_vw>? announcementForTheMonth;
    private Timer? timer;

    public class t_doc_office_vw
    {
        public long? docid { get; set; }
        public string? title { get; set; }
        public string? description { get; set; }
        public string? OfficeName { get; set; }
        public string? doctype { get; set; }
        public DateTime? docdate { get; set; }
    }
    private bool hasTodayRecord;

    // Method to fetch office announcements for the month from the API
    private async Task officeViewAnnouncementsForTheMonth()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync(API_URL + "/api/eportal_docs_view/officeViewAnnouncements")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response
            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            announcementForTheMonth = await JsonSerializer.DeserializeAsync<List<t_doc_office_vw>>(responseStream, options);

            hasTodayRecord = announcementForTheMonth.Any(announcement => announcement.docdate?.Date == DateTime.Today);
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Method to truncate text to a specified length
    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text))
        {
            return text;
        }

        return text.Length <= maxLength ? text : text.Substring(0, maxLength) + "...";
    }
}
