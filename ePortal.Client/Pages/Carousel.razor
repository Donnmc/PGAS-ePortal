@page "/carousel"
@using System.IO
@using System.Text
@using System.Threading
@using System.Net.Http.Headers
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   MaximumFileCount="20"
                   AppendMultipleFiles
                   OnFilesChanged="OnInputFileChanged"
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                   InputStyle="opacity:0"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6">
                    Drag and drop files here or click
                </MudText>
                @foreach (var file in _fileNames)
                {
                    <MudChip Color="Color.Dark" Text="@file.Name" />
                }
            </MudPaper>
            <MudToolBar DisableGutters="true"
                        Class="relative d-flex justify-end gap-4 z-30">
                <MudButton HtmlTag="label"
                           Color="Color.Primary"
                           for="@context.Id"
                           Variant="Variant.Filled">
                    Open file picker
                </MudButton>
                <MudButton OnClick="@Upload"
                           Color="Color.Primary"
                           Disabled="@(!_fileNames.Any())"
                           Variant="Variant.Filled">
                    Upload
                </MudButton>
                <MudButton OnClick="@Clear"
                           Color="Color.Error"
                           Disabled="@(!_fileNames.Any())"
                           Variant="Variant.Filled">
                    Clear
                </MudButton>
            </MudToolBar>
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>

@code {
    // Get API URL
    private readonly string API_URL = APIService.PGASePortalAPI;
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private readonly List<IBrowserFile> _fileNames = new();
    private Dictionary<Guid, IBrowserFile> filesToUpload = new Dictionary<Guid, IBrowserFile>();
    private List<Guid> toBeRemoved = new List<Guid>();

    private async Task Clear()
    {
        _fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file);
        }
    }

    private async Task Upload()
    {
        if (!_fileNames.Any())
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("Please select a file.");
            return;
        }

        foreach (var file in _fileNames)
        {
            await UploadFile(file);
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Files uploaded successfully!");
        _fileNames.Clear();
        ClearDragClass();
    }

    private async Task UploadFile(IBrowserFile fileToUpload)
    {
        var fileId = Guid.NewGuid();
        filesToUpload[fileId] = fileToUpload;

        foreach (var fileEntry in filesToUpload.ToList())
        {
            try
            {
                var file = fileEntry.Value;
                var formData = new MultipartFormDataContent();
                var streamContent = new StreamContent(file.OpenReadStream(long.MaxValue));
                streamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                formData.Add(streamContent, "file", file.Name);
                formData.Add(new StringContent(file.Name), "image_name");
                formData.Add(new StringContent(file.ContentType), "image_type");
                formData.Add(new StringContent(DateTime.UtcNow.ToString("o")), "upload_date");

                var response = await HttpClient.PostAsync($"{API_URL}/api/carousel_image", formData);

                if (response.IsSuccessStatusCode)
                {
                    // Add the uploaded file's ID to the removal list
                    toBeRemoved.Add(fileEntry.Key);

                    // Show a success message using Snackbar
                    Snackbar.Clear();
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                    Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
                    Snackbar.Add("File uploaded successfully!", Severity.Success);
                }
                else
                {

                    Snackbar.Clear();
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                    Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
                    // Show an error message using Snackbar
                    Snackbar.Add("Failed to upload file.", Severity.Error);
                }
            }
            catch (Exception ex)
            {

                Snackbar.Clear();
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
                // Handle exception and show error message
                Snackbar.Add($"Error uploading file: {ex.Message}", Severity.Error);
            }
        }

        // Modify the original collection outside of the iteration
        foreach (var fileIdToRemove in toBeRemoved.ToList())
        {
            filesToUpload.Remove(fileIdToRemove);
            toBeRemoved.Remove(fileIdToRemove);
        }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
