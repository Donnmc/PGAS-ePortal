@page "/files"
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   AppendMultipleFiles
                   OnFilesChanged="OnInputFileChanged"
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                   InputStyle="opacity:0"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6">
                    Drag and drop files here or click
                </MudText>
                @foreach (var file in _uploadedFiles)
                {
                    <MudChip Color="Color.Dark" Text="@file.Name" />
                }
            </MudPaper>
            <MudToolBar DisableGutters="true"
                        Class="relative d-flex justify-end gap-4 z-30">
                <MudButton HtmlTag="label"
                           Color="Color.Primary"
                           for="@context.Id"
                           Variant="Variant.Filled">
                    Open file picker
                </MudButton>
                <MudButton OnClick="@Upload"
                           Color="Color.Primary"
                           Disabled="@(!_uploadedFiles.Any())"
                           Variant="Variant.Filled">
                    Upload
                </MudButton>
                <MudButton OnClick="@Clear"
                           Color="Color.Error"
                           Disabled="@(!_uploadedFiles.Any())"
                           Variant="Variant.Filled">
                    Clear
                </MudButton>
            </MudToolBar>
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private readonly List<IBrowserFile> _uploadedFiles = new();

    private async Task Clear()
    {
        _uploadedFiles.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _uploadedFiles.Add(file);
        }
    }

    private async Task Upload()
    {
        // Create a copy of the uploaded files list
        var filesToUpload = new List<IBrowserFile>(_uploadedFiles);

        foreach (var file in filesToUpload)
        {
            var formData = new MultipartFormDataContent();
            formData.Add(new StreamContent(file.OpenReadStream(1024*1024*2000)), "file", file.Name);

            var response = await HttpClient.PostAsync("https://localhost:7074/api/FTP/upload", formData);

            if (response.IsSuccessStatusCode)
            {
                // Remove the uploaded file from the original list
                _uploadedFiles.Remove(file);

                // Show a success message using Snackbar
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add("Files uploaded successfully!", Severity.Success);
            }
            else
            {
                // Show an error message using Snackbar
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add("Failed to upload files.", Severity.Error);
            }
        }
    }



    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
