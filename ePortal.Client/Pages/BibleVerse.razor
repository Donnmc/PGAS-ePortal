@page "/bible-verse"
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks

<!-- Page Title -->
<PageTitle>Bible Verses | ePortal | Provincial Government of Agusan del Sur</PageTitle>

<!-- Display latest Bible verse -->
<MudStack Class="ma-5 justify-center" Style="width: 400px">
    @if (latestVerse != null)
    {
        <!-- Display latest Bible verse in a MudCard -->
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>@latestVerse.Chapter</MudText>
                <MudText Typo="Typo.body2">@latestVerse.Verse</MudText>
            </MudCardContent>
            <MudCardActions>
                <!-- Display date of the latest verse -->
                <MudButton Variant="Variant.Text" Color="Color.Primary">@latestVerse.Date?.ToString("yyyy-MM-dd")</MudButton>
            </MudCardActions>
        </MudCard>
    }
    else
    {
        <!-- Display a loading indicator if data is not available -->
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
</MudStack>

<!-- Display all Bible verses in a MudTable -->
<MudStack Class="ma-5">
    @if (getAllVerses != null)
    {
        <!-- Display MudTable if data is available -->
        <MudTable Style="overflow-x: auto" Dense="true" Striped="true" Elevation="0" Outlined="true" Items="getAllVerses" Hover="true" SortLabel="Sort By" Class="flex-grow-1">
            <HeaderContent>
                <!-- Define table column headers for Verse, Chapter, and Date -->
                <MudTh><MudTableSortLabel SortBy="@((BibleVerseDTO x) => x.Verse)">Verse</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((BibleVerseDTO x) => x.Chapter)">Chapter</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((BibleVerseDTO x) => x.Date)">Date</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <!-- Define table row template for Verse, Chapter, and Date -->
                <MudTd Style="width: 70%">@context.Verse</MudTd>
                <MudTd Style="width: 20%">@context.Chapter</MudTd>
                <MudTd Style="width: 10%">@context.Date?.ToString("yyyy-MM-dd")</MudTd>
            </RowTemplate>
            <PagerContent>
                <!-- Display table pager for pagination -->
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <!-- Display a loading indicator if data is not available -->
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
</MudStack>

@code {
    // Get API URL
    private string API_URL = APIVariable.PGASePortalAPI;

    // DTO class for individual Bible verses
    public class BibleVerseDTO
    {
        public string Verse { get; set; } = string.Empty;
        public string Chapter { get; set; } = string.Empty;
        public DateTime? Date { get; set; }
        public bool? Archive { get; set; }
    }

    // DTO class for the latest Bible verse
    public class BibleVerseLatestDTO
    {
        public string Verse { get; set; } = string.Empty;
        public string Chapter { get; set; } = string.Empty;
        public DateTime? Date { get; set; }
    }

    private List<BibleVerseDTO>? getAllVerses; // List to store all Bible verses
    private BibleVerseLatestDTO? latestVerse; // Latest Bible verse

    protected override async Task OnInitializedAsync()
    {
        await RefreshLatestVerse(); // Fetch the latest Bible verse
        await GetAllVerses(); // Fetch all Bible verses
    }

    // Method to fetch all Bible verses from the API
    private async Task GetAllVerses()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync(API_URL + "/api/bible_verses");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response
            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            getAllVerses = await JsonSerializer.DeserializeAsync<List<BibleVerseDTO>>(responseStream,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Method to refresh the latest Bible verse from the API
    private async Task RefreshLatestVerse()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync(API_URL + "/api/bible_verses/latest");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response
            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            latestVerse = await JsonSerializer.DeserializeAsync<BibleVerseLatestDTO>(responseStream,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
