@page "/bible-verse"
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks

<MudStack Class="ma-5 justify-center" Style="width: 400px">
    @if (latestVerse != null)
    {
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>@latestVerse.Chapter</MudText>
                <MudText Typo="Typo.body2">@latestVerse.Verse</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary">@latestVerse.Date?.ToString("yyyy-MM-dd")</MudButton>
            </MudCardActions>
        </MudCard>
    }
    else
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
</MudStack>
<MudStack Class="ma-5">
    @if (getAllVerses != null)
    {
        <MudTable Style="overflow-x: auto" Dense="true" Striped="true" Elevation="0" Outlined="true" Items="getAllVerses" Hover="true" SortLabel="Sort By" Class="flex-grow-1">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="@((BibleVerseDTO x) => x.Verse)">Verse</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((BibleVerseDTO x) => x.Chapter)">Chapter</MudTableSortLabel></MudTh>
                <MudTh><MudT SortBy="@((BibleVerseDTO x) => x.Date)">Date</MudT    ableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="width: 70%" >@context.Verse</MudTd>
                <MudTd Style="width: 20%">@context.Chapter</MudTd>
                <MudTd Style="width: 10%">@context.Date?.ToString("yyyy-MM-dd")</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
</MudStack>

@code {

    public class BibleVerseDTO
    {
        public string Verse { get; set; } = string.Empty;
        public string Chapter { get; set; } = string.Empty;
        public DateTime? Date { get; set; }
        public bool? Archive { get; set; }
    }

    public class BibleVerseLatestDTO
    {
        public string Verse { get; set; } = string.Empty;
        public string Chapter { get; set; } = string.Empty;
        public DateTime? Date { get; set; }
    }

    private const string API_URL = "https://localhost:7049";

    private List<BibleVerseDTO>? getAllVerses;
    private BibleVerseLatestDTO? latestVerse;

    protected override async Task OnInitializedAsync()
    {
        await RefreshLatestVerse();
        await GetAllVerses();
    }


    private async Task GetAllVerses()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync(API_URL + "/api/bible_verses");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response
            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            getAllVerses = await JsonSerializer.DeserializeAsync<List<BibleVerseDTO>>(responseStream,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task RefreshLatestVerse()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync(API_URL + "/api/bible_verses/latest");
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response
            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            latestVerse = await JsonSerializer.DeserializeAsync<BibleVerseLatestDTO>(responseStream,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
