@page "/external-link"
@using System.Text.Json
@using System.Net.Http
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@inject HttpClient HttpClient

<PageTitle>External Links | PGAS Portal</PageTitle>

<MudGrid Spacing="5" Class="pa-5">
    <!-- Header -->
    <MudItem xs="12">
        <MudText Style="font-size: 30px"><b>External Links</b></MudText>
        <MudDivider />
    </MudItem>
    <!--Add/Update-->
    <MudItem xs="12">
        <MudPaper Elevation="0">
            <MudStack Row Spacing="3" Class="pa-3">
                <MudTextField Margin="Margin.Dense" T="string" Variant="Variant.Outlined" @bind-Value="parentList" Label="Parent List"></MudTextField>
                <MudTextField Margin="Margin.Dense" T="string" Variant="Variant.Outlined" @bind-Value="parentListIcon" Label="Parent List Icon"></MudTextField>
                <MudTextField Margin="Margin.Dense" T="string" Variant="Variant.Outlined" @bind-Value="parentListLink" Label="Parent List Link"></MudTextField>
                <MudTextField Margin="Margin.Dense" T="int?" Variant="Variant.Outlined" @bind-Value="parentListOrder" Disabled Label="Order"></MudTextField>
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddParentExternalLink">Add</MudButton>
            </MudStack>
        </MudPaper>
    </MudItem>
    <!-- Content -->
    <MudItem xs="12">
        <MudTable Elevation="0" Items="@externalLinks" Hover="true" Breakpoint="Breakpoint.Sm">
            <ColGroup>
                <col style="width: 20%" />
                <col style="width: 15%" />
                <col style="width: 35%" />
                <col style="width: 15%" />
                <col style="width: 15%" />
                <col style="width: 10%" />
            </ColGroup>
            <HeaderContent>
                <MudTh>Parent List Name</MudTh>
                <MudTh>Parent List Icon</MudTh>
                <MudTh>Parent List Link</MudTh>
                <MudTh>Date Created</MudTh>
                <MudTh>Order</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Parent List Name">@context.Parent_List_Name</MudTd>
                <MudTd DataLabel="Parent List Icon">@context.Parent_List_Icon</MudTd>
                <MudTd DataLabel="Parent List Link">@context.Parent_List_Link</MudTd>
                <MudTd DataLabel="Date Created">@context.Parent_List_Date_Created?.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel="Order">
                    @if (context.IsEditing)
                    {
                        <MudTextField @bind-Value="context.Parent_List_Order" />
                    }
                    else
                    {
                        @context.Parent_List_Order
                    }
                </MudTd>
                <MudTd>
                    <MudStack Row>
                        <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                    </MudStack>
                </MudTd>
                @if (string.IsNullOrEmpty(context.Parent_List_Link))
                {
                    <MudTd>
                        <MudIconButton Size="Size.Small" Icon="@((context.ShowDetails == true) ? @Icons.Material.Filled.ArrowDropUp : @Icons.Material.Filled.ArrowDropDown)"
                                       OnClick="@(() => ShowBtnPress(context.Parent_List_Name))" />
                    </MudTd>
                }
                else
                {
                    <MudTd DataLabel="Parent List Link"></MudTd>
                }
            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    <MudTr Style="width:100%">
                        <MudTd Class="pa-0" colspan="7">
                            <MudTable Items="@context.v_external_linkChildList" Context="ChildContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                <ColGroup>
                                    <col style="width: 5%" />
                                    <col style="width: 15%" />
                                    <col style="width: 15%" />
                                    <col style="width: 35%" />
                                    <col style="width: 15%" />
                                    <col style="width: 20%" />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh Style="text-align: right"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.SubdirectoryArrowRight" /></MudTh>
                                    <MudTh>Child List Name</MudTh>
                                    <MudTh>Child List Icon</MudTh>
                                    <MudTh>Child List Link</MudTh>
                                    <MudTh>Date Created</MudTh>
                                    <MudTh>Order</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd></MudTd>
                                    <MudTd DataLabel="Child List Name">@ChildContext.Child_List_Name</MudTd>
                                    <MudTd DataLabel="Child List Icon">@ChildContext.Child_List_Icon</MudTd>
                                    <MudTd DataLabel="Child List Link">@ChildContext.Child_List_Link</MudTd>
                                    <MudTd DataLabel="Date Created">@ChildContext.Child_List_Date_Created?.ToString("yyyy-MM-dd")</MudTd>
                                    <MudTd DataLabel="Order">@ChildContext.Child_List_Order</MudTd>
                                    <MudTd>
                                        <MudStack Row>
                                            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                        </MudStack>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudTd>
                        <MudDivider />
                    </MudTr>
                }
            </ChildRowContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    private readonly string API_URL = APIService.PGASPortalAPI;
    private List<external_link_parent>? externalLinksParent;
    private List<v_external_linkParentListDTO>? externalLinks;
    private string? parentList;
    private string? parentListIcon;
    private string? parentListLink;
    private int? parentListOrder;


    public partial class external_link_parent
    {
        public int id { get; set; }
        public string? name { get; set; }
        public string? icon { get; set; }
        public string? link { get; set; }
        public int? order { get; set; }
        public DateTime? date_created { get; set; }
        public bool? active { get; set; }
        public virtual ICollection<external_link_child>? external_link_child { get; set; } = new List<external_link_child>();
    }

    public partial class external_link_child
    {
        public int id { get; set; }
        public int parent_id { get; set; }
        public string? name { get; set; }
        public string? link { get; set; }
        public string? icon { get; set; }
        public int? order { get; set; }
        public DateTime? date_created { get; set; }
        public bool? active { get; set; }
        public virtual external_link_parent? parent { get; set; }
    }

    public class v_external_linkParentListDTO
    {
        public string? Parent_List_Name { get; set; }
        public string? Parent_List_Icon { get; set; }
        public string? Parent_List_Link { get; set; }
        public DateTime? Parent_List_Date_Created { get; set; }
        public int? Parent_List_Order { get; set; }
        public bool IsEditing { get; set; }
        public bool ShowDetails { get; set; }
        public List<v_external_linkChildListDTO>? v_external_linkChildList { get; set; }
    }

    public class v_external_linkChildListDTO
    {
        public string? Child_List_Name { get; set; }
        public string? Child_List_Icon { get; set; }
        public string? Child_List_Link { get; set; }
        public DateTime? Child_List_Date_Created { get; set; }
        public int? Child_List_Order { get; set; }
        public bool IsEditing { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetExternalLinks();
    }

    private async Task GetExternalLinks()
    {
        try
        {
            HttpResponseMessage httpResponse = await HttpClient.GetAsync($"{API_URL}/api/external_link");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            externalLinks = await JsonSerializer.DeserializeAsync<List<v_external_linkParentListDTO>>(responseStream, options);

            SetInitialOrderValues(externalLinks);

            parentListOrder = GetLatestParentOrder(externalLinks) + 1;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task AddParentExternalLink()
    {
        var parentLink = new external_link_parent
            {
                name = parentList,
                icon = parentListIcon,
                link = parentListLink,
                order = parentListOrder
            };

        try
        {
            using HttpClient httpClient = new();
            var content = new MultipartFormDataContent
            {
                { new StringContent(parentLink.name ?? string.Empty), "name" },
                { new StringContent(parentLink.icon ?? string.Empty), "icon" },
                { new StringContent(parentLink.link ?? string.Empty), "link" },
                { new StringContent(parentLink.order.ToString() ?? string.Empty), "order" }
            };

            HttpResponseMessage response = await httpClient.PostAsync($"{API_URL}/api/external_link/parent", content);
            response.EnsureSuccessStatusCode();

            ClearParentEntry(); 
            await GetExternalLinks();
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error submitting external link: {ex.Message}");
        }
    }

    private void ClearParentEntry()
    {
        parentList = "";
        parentListIcon = "";
        parentListLink = "";
    }

    private void ShowBtnPress(string? parentName)
    {
        var tmpParent = externalLinks?.FirstOrDefault(p => p.Parent_List_Name == parentName);
        if (tmpParent != null)
        {
            tmpParent.ShowDetails = !tmpParent.ShowDetails;
        }
    }

    private void SetInitialOrderValues(List<v_external_linkParentListDTO> parentList)
    {
        foreach (var parent in parentList)
        {
            parent.Parent_List_Order ??= GetLatestParentOrder(parentList) + 1;
            if (parent.v_external_linkChildList != null)
            {
                foreach (var child in parent.v_external_linkChildList)
                {
                    child.Child_List_Order ??= GetLatestChildOrder(parent.v_external_linkChildList) + 1;
                }
            }
        }
    }

    private int GetLatestParentOrder(List<v_external_linkParentListDTO> parentList)
    {
        return parentList.Any() ? parentList.Max(p => p.Parent_List_Order ?? 0) : 0;
    }

    private int GetLatestChildOrder(List<v_external_linkChildListDTO> childList)
    {
        return childList.Any() ? childList.Max(c => c.Child_List_Order ?? 0) : 0;
    }
}

