@page "/"
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject UserService UserService
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS

<MudGrid Class="pt-5" Spacing="10">
    <!-- Province Card -->
    <MudItem xs="12">
        <MudLink Href="https://agusandelsur.gov.ph/" Target="_blank" Underline="Underline.None">
            <MudPaper Elevation="0" Class="pa-5">
                <MudStack Class="flex-column flex-lg-row">
                    <MudStack Class="flex-column flex-md-row justify-center" AlignItems="AlignItems.Center">
                        <MudImage Fluid Width="120" Src="Objects/Agusan del Sur Logo.webp"></MudImage>
                        <MudStack Spacing="0" Class="align-center justify-center align-lg-start">
                            <MudText>
                                Republic of the Philippines
                            </MudText>
                            <MudDivider />
                            <MudText Style="font-size: 30px" Color="Color.Tertiary">
                                <b>Province of Agusan del Sur</b>
                            </MudText>
                        </MudStack>
                    </MudStack>
                    <MudSpacer />
                    <MudStack Row Class="justify-center justify-lg-end">
                        <MudImage Fluid Width="120" Src="Objects/PH Seal of Transparency.webp"></MudImage>
                        <MudImage Fluid Width="120" Src="Objects/PH Coat of Arms.webp"></MudImage>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudLink>
    </MudItem>
    <!-- Applications -->
    <MudItem xs="12">
        @if (informationSystems != null && informationSystems.Any())
        {
            <MudTabs Elevation="0" Rounded>
                <MudVirtualize Items="informationSystems" Context="cluster">
                    <MudTabPanel Style="text-transform:none" Text="@cluster.Cluster_Name" Icon="@(typeof(Icons.Material.Filled).GetField(cluster.Cluster_Icon)?.GetValue(null) as string ?? "")">
                        <MudStack Class="pt-5">
                            <!-- Content -->
                            <MudGrid Spacing="5">
                                <MudVirtualize Items="cluster.Information_Systems" Context="system">
                                    <MudItem xs="6" sm="3" lg="2">
                                        <MudPaper Elevation="0" Class="pa-5" Height="100%" MinHeight="185px">
                                            <MudLink Href="@system.Information_System_Link" Target="_blank" Color="Color.Tertiary" Underline="Underline.None">
                                                <MudStack Row Style="height: 100%">
                                                    <MudStack Spacing="0" Style="width: 100%">
                                                        <MudStack Row Class="pa-0" Style="width: 100%">
                                                            <MudIcon Style="font-size: 4rem;" Icon="@(typeof(Icons.Material.Filled).GetField(system.Information_System_Icon)?.GetValue(null) as string ?? "")"
                                                                     Color="Color.Primary" />
                                                            <MudSpacer/>
                                                            <MudIcon Size="Size.Small" Icon="@((system.Information_System_Platform == "Web App") ? @Icons.Material.Filled.OpenInNew : @Icons.Material.Filled.DesktopWindows)" />
                                                        </MudStack>
                                                        <MudStack Spacing="1">
                                                            <MudText Style="font-size: 14px"><b>@system.Information_System_Abbreviation</b></MudText>
                                                            <MudText Style="font-size: 12px">@system.Information_System_Name</MudText>
                                                        </MudStack>
                                                    </MudStack>
                                                </MudStack>
                                            </MudLink>
                                        </MudPaper>
                                    </MudItem>
                                </MudVirtualize>
                            </MudGrid>
                        </MudStack>
                    </MudTabPanel>
                </MudVirtualize>
            </MudTabs>
        }
        else
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        }
    </MudItem>
    <MudItem xs="12" lg="6">
        <MudGrid Spacing="5">
            <!-- Governor -->
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pb-0 pt-5 px-5">
                    <MudStack Row Style="height: 300px" Spacing="0" Justify="Justify.SpaceAround">
                        <MudStack Class="pa-1" Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudStack Spacing="0" Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
                                <MudText Style="font-size: 4vmin"><b>Santiago B. Cane, Jr.</b></MudText>
                                <MudText Style="font-size: 2vmin">Provincial Governor</MudText>
                                <MudDivider />
                            </MudStack>
                            <MudStack Row Class="pa-0 ma-0" Spacing="0">
                                <MudIconButton Class="pa-1"
                                               Icon="@Icons.Custom.Brands.Facebook"
                                               Color="Color.Secondary"
                                               Href="https://www.facebook.com/santi.cane.3" Target="_blank" />
                                <MudIconButton Class="pa-1"
                                               Icon="@Icons.Material.Filled.PersonPin"
                                               Color="Color.Secondary"
                                               Href="https://agusandelsur.gov.ph/government-officials/governor/" Target="_blank" />
                                <MudIconButton Class="pa-1"
                                               Icon="@Icons.Material.Filled.LibraryBooks"
                                               Color="Color.Secondary"
                                               Href="Media Files/Governor/ELA2023.jpg" Target="_blank" />
                            </MudStack>
                        </MudStack>
                        <MudImage Src="/Media Files/Governor/gov-image.png" Fluid />
                    </MudStack>
                </MudPaper>
            </MudItem>
            <!-- Gov Images -->
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-5">
                    @if (images != null && images.Count > 0)
                    {
                        <MudStack Row Spacing="1" Justify="Justify.Center">
                            <MudStack Spacing="1">
                                @foreach (var image in images.Take(2))
                                {
                                    <MudImage Style="object-fit: cover; height: 100%; width: 100%"
                                              Class="spotlight cursor-pointer"
                                              ObjectFit="ObjectFit.Cover"
                                              Src="@($"Uploads/{image.file_name}")" />
                                }
                            </MudStack>
 
                            <MudStack Spacing="1">
                                @foreach (var image in images.Skip(2).Take(2))
                                {
                                    <MudImage Style="object-fit: cover; height: 33.33%; width: 100%"
                                              Class="spotlight cursor-pointer"
                                              ObjectFit="ObjectFit.Cover"
                                              Src="@($"Uploads/{image.file_name}")" />
                                }
                                @foreach (var image in images.Skip(4).Take(1))
                                {
                                    <MudLink Href="@($"Uploads/{image.file_name}")" Underline="Underline.None" Class="spotlight" Style="height: 33.33%">
                                        <MudStack Class="relative" Style="height: 100%">
                                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center"
                                                      Style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgb(0,0,0, 0.25);">

                                                @{
                                                    var count = images.Count() - 5;
                                                    string totalCount = count.ToString();

                                                    <MudText Style="font-size: 30px; color: white">+@totalCount</MudText>
                                                }
                                            </MudStack>
                                            <MudImage Style="object-fit: cover; height: 100%; width: 100%"
                                                      Class="cursor-pointer"
                                                      ObjectFit="ObjectFit.Cover"
                                                      Src="@($"Uploads/{image.file_name}")">
                                            </MudImage>
                                        </MudStack>
                                    </MudLink>
                                }
                                @foreach (var image in images.Skip(5))
                                {
                                    <MudImage Style="display: none; height: 26.66%; width: 100%"
                                              ObjectFit="ObjectFit.Cover"
                                              Class="spotlight cursor-pointer"
                                              Src="@($"Uploads/{image.file_name}")">
                                    </MudImage>
                                }
                                <MudButton Variant="Variant.Filled"
                                           Style="background-color: yellowgreen; color: white; width: 200px; height: 60px;">
                                    Download Now

                                    <a href="https://example.com/file.pdf" target="_blank" style="margin-left: 10px; text-decoration: none; color: inherit;">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowForward" />
                                    </a>
                                </MudButton>

                            </MudStack>
                        </MudStack>
                    }
                    else
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Style="width: 100%; height: 500px" />
                    }

                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12" lg="6">
        <MudGrid Spacing="5">
            <!-- Socials Cards-->
            <MudItem xs="12">
                <MudGrid Spacing="5">
                    <MudVirtualize Items="externalLinks" Context="cardItems">
                        <MudItem xs="6" sm="3">
                            <MudPaper Elevation="0" Class="pa-5" Height="100%" MinHeight="250px">
                                <MudLink Href="@cardItems.Link" Target="_blank" Color="Color.Tertiary" Underline="Underline.None">
                                    <MudStack Row Style="height: 100%">
                                        <MudStack Style="width: 100%">
                                            <MudStack Class="absolute align-self-end">
                                                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.OpenInNew"></MudIcon>
                                            </MudStack>
                                            <MudImage Src="@($"Objects/{cardItems.Name}.webp")" ObjectFit="ObjectFit.Contain" Width="100" />
                                            <MudStack Spacing="1">
                                                <MudText Style="font-size: 14px"><b>@cardItems.Name</b></MudText>
                                                <MudText Style="font-size: 12px">@cardItems.Type</MudText>
                                            </MudStack>
                                        </MudStack>
                                    </MudStack>
                                </MudLink>
                            </MudPaper>
                        </MudItem>
                    </MudVirtualize>
                </MudGrid>
            </MudItem>
            <!-- Promoted Employees -->
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-2">
                    <MudStack Spacing="5">
                        <!-- Header -->
                        <MudText Style="font-size: 25px" Align="Align.Center"><b>Promoted Employees</b></MudText>
                        <MudDivider />
                        <!-- Promoted Employees List -->
                        @if (paginatedPromotedEmployees != null && paginatedPromotedEmployees.Count > 0)
                        {
                            <MudGrid Spacing="5">
                                <MudVirtualize Items="paginatedPromotedEmployees" Context="promoted">
                                    <MudItem xs="6" md="4">
                                        <MudPaper Outlined>
                                            <MudStack Spacing="0">
                                                <MudImage Src="@("https://pgas.ph/hris/Content/images/photos/"+ promoted.eid + ".png")"
                                                          Class="rounded-t" Style="height: 250px; width: 100%; background-color: white"
                                                          Fluid onerror="this.src='Objects/agusan del sur.webp'"
                                                          ObjectFit="ObjectFit.Cover"
                                                          ObjectPosition="ObjectPosition.Top">
                                                </MudImage>
                                                <MudStack Spacing="1" Class="pa-3">
                                                    <MudStack Spacing="1" Style="height: 70px">
                                                        <MudText Style="font-size: 14px"><b>@promoted.EmployeeName</b></MudText>
                                                        <MudText Style="font-size: 13px" Typo="Typo.body2">@promoted.OfficeName</MudText>
                                                    </MudStack>
                                                    <MudDivider />
                                                    <MudStack Style="height: 70px" Justify="Justify.SpaceBetween">
                                                        <MudStack Row Spacing="1">
                                                            <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp" Size="Size.Small" Color="Color.Primary" />
                                                            <MudText Style="font-size: 12px"><b>@promoted.Position</b></MudText>
                                                        </MudStack>
                                                        <MudText Align="Align.End" Style="font-size: 10px">@(promoted.AppointCoverage?.ToString("MMMM dd, yyyy") ?? "No Date")</MudText>
                                                    </MudStack>
                                                </MudStack>
                                            </MudStack>
                                        </MudPaper>
                                    </MudItem>
                                </MudVirtualize>
                            </MudGrid>
                            <MudStack Row Class="pt-3" Justify="Justify.Center">
                                <MudPagination ShowFirstButton ShowLastButton Size="Size.Small" Count="@totalPagesPromotedEmployees" SelectedChanged="OnPageChangedPromotedEmployees" />
                            </MudStack>
                        }
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>
@code {
    // Get API URL
    private readonly string API_URL = APIService.PGASPortalAPI;
    private List<vw_pgas_employeesDTO>? pgasEmployees;
    private List<carousel_image>? images;
    private int numberOfEmployees;

    private List<praise_message>? praiseMessages;
    private List<praise_message>? paginatedPraiseMessages;
    private int pageSizePraiseMessages = 10; // Count per pagination for praise messages
    private int currentPagePraiseMessages = 1;
    private int totalPagesPraiseMessages => (int)Math.Ceiling((double)(praiseMessages?.Count ?? 0) / pageSizePraiseMessages);

    private List<vw_pgas_employeesDTO>? promotedEmployees;
    private List<vw_pgas_employeesDTO>? paginatedPromotedEmployees;
    private int pageSizePromotedEmployees = 3; // Count per pagination for promoted employees
    private int currentPagePromotedEmployees = 1;
    private int totalPagesPromotedEmployees => (int)Math.Ceiling((double)(promotedEmployees?.Count ?? 0) / pageSizePromotedEmployees);

    private bool? isDarkMode;
    private List<v_clustered_information_systemDTO>? informationSystems;

    private ElementReference divRef;
    private double divHeight = 0;


    private async Task GetDivSizeAndApply()
    {
        var size = await JS.InvokeAsync<ElementSize>("getElementSize", divRef);
        divHeight = size.Height - 105;
    }

    private class ElementSize
    {
        public double Width { get; set; }
        public double Height { get; set; }
    }

    private List<ExternalLink> externalLinks = new List<ExternalLink>
    {
        new ExternalLink { Link = "https://agusandelsur.gov.ph/", Name = "Agusan del Sur Official Website", Type = "Website" },
        new ExternalLink { Link = "https://www.facebook.com/NaliyaganFestival", Name = "Naliyagan Festival", Type = "Facebook Page" },
        new ExternalLink { Link = "https://www.facebook.com/UnlockTheLandlockedAgusanDelSur", Name = "Unlock the Landlocked Agusan del Sur", Type = "Facebook Page" },
        new ExternalLink { Link = "https://www.facebook.com/ppioagusansur", Name = "Provincial Public Information Office Agusan del Sur", Type = "Facebook Page" }
    };

    private class ExternalLink
    {
        public string? Link { get; set; }
        public string? Name { get; set; }
        public string? Type { get; set; }
    }

    public class vw_pgas_employeesDTO
    {
        public long? eid { get; set; }
        public string? SwipeID { get; set; }
        public string? OfficeName { get; set; }
        public string? OfficeAbbr { get; set; }
        public string? EmployeeName { get; set; }
        public string? Position { get; set; }
        public byte? SG { get; set; }
        public string? Status { get; set; }
        public bool? isactive { get; set; }
        public string? Telephone { get; set; }
        public string? EmailAdd { get; set; }
        public string? Cause { get; set; }
        public DateTime? AppointCoverage { get; set; }
    }

    public partial class praise_message
    {
        public int id { get; set; }
        public long from_eid { get; set; }
        public long to_eid { get; set; }
        public string? message { get; set; }
        public int stars { get; set; }
        public DateTime? date { get; set; }
        public bool? archive { get; set; }
    }

    public partial class carousel_image
    {
        public string? file_name { get; set; }
        public DateTime? upload_date { get; set; }
        public bool IsEnlarged { get; set; } = false;
    }

    public class v_clustered_information_systemDTO
    {
        public string Cluster_Name { get; set; } = string.Empty;
        public string Cluster_Abbreviation { get; set; } = string.Empty;
        public string Cluster_Icon { get; set; } = string.Empty;
        public List<InformationSystemDTO>? Information_Systems { get; set; }
    }

    public class InformationSystemDTO
    {
        public string Information_System_Name { get; set; } = string.Empty;
        public string Information_System_Abbreviation { get; set; } = string.Empty;
        public string Information_System_Icon { get; set; } = string.Empty;
        public string Information_System_Link { get; set; } = string.Empty;
        public string Information_System_Platform { get; set; } = string.Empty;
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetGroupedClusters();
            await LoadEmployees();
            await LoadPromotedEmployees();
            await LoadCarousel();
            await LoadNumberOfEmployees();
            isDarkMode = await UserService.GetDarkModeAsync();
            UserService.OnThemeChanged += HandleThemeChangedAsync;
            StateHasChanged();
            await LoadPraiseMessages();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        finally
        {
            await base.OnInitializedAsync();
        }
    }

    private async Task HandleThemeChangedAsync()
    {
        isDarkMode = await UserService.GetDarkModeAsync(); // Ensure state is updated
        StateHasChanged();
    }

    public void Dispose()
    {
        UserService.OnThemeChanged -= HandleThemeChangedAsync;
    }

    private async Task LoadPraiseMessages()
    {
        try
        {
            using HttpClient httpClient = new();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/praise_message/GetAllPraiseMessages");
            httpResponse.EnsureSuccessStatusCode();

            string jsonResponse = await httpResponse.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            praiseMessages = JsonSerializer.Deserialize<List<praise_message>>(jsonResponse, options);
            UpdatePaginatedPraiseMessages();
            await GetDivSizeAndApply();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void UpdatePaginatedPraiseMessages()
    {
        paginatedPraiseMessages = praiseMessages?
            .Skip((currentPagePraiseMessages - 1) * pageSizePraiseMessages)
            .Take(pageSizePraiseMessages)
            .ToList();
    }

    private void OnPageChangedPaginatedPraiseMessages(int page)
    {
        currentPagePraiseMessages = page;
        UpdatePaginatedPraiseMessages();
    }

    private async Task LoadEmployees()
    {
        try
        {
            using HttpClient httpClient = new();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/vw_pgas_employeesDTO");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            pgasEmployees = await JsonSerializer.DeserializeAsync<List<vw_pgas_employeesDTO>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task LoadPromotedEmployees()
    {
        try
        {
            using HttpClient httpClient = new();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/vw_pgas_employeesDTO/promotedEmployees");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            promotedEmployees = await JsonSerializer.DeserializeAsync<List<vw_pgas_employeesDTO>>(responseStream, options);
            UpdatePaginatedPromotedEmployees();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task LoadNumberOfEmployees()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/vw_pgas_employeesDTO/numberOfEmployees");
            httpResponse.EnsureSuccessStatusCode();

            // Deserialize the response content to int
            numberOfEmployees = await httpResponse.Content.ReadFromJsonAsync<int>();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            // Handle exception as needed
        }
    }

    private void UpdatePaginatedPromotedEmployees()
    {
        paginatedPromotedEmployees = promotedEmployees?
            .Skip((currentPagePromotedEmployees - 1) * pageSizePromotedEmployees)
            .Take(pageSizePromotedEmployees)
            .ToList();
    }

    private void OnPageChangedPromotedEmployees(int page)
    {
        currentPagePromotedEmployees = page;
        UpdatePaginatedPromotedEmployees();
    }

    private async Task LoadCarousel()
    {
        try
        {
            using HttpClient httpClient = new();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/carousel_image/images");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            images = await JsonSerializer.DeserializeAsync<List<carousel_image>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GetGroupedClusters()
    {
        try
        {
            using HttpClient httpClient = new HttpClient();
            HttpResponseMessage httpResponse = await httpClient.GetAsync(API_URL + "/api/vw_clustered_information_system")!;
            httpResponse.EnsureSuccessStatusCode(); // Ensure a successful response

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            informationSystems = await JsonSerializer.DeserializeAsync<List<v_clustered_information_systemDTO>>(responseStream, options);

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // Handle exception, log, or display an error message
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    // Method to truncate text to a specified length
    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text))
        {
            return text;
        }

        return text.Length <= maxLength ? text : text.Substring(0, maxLength) + "...";
    }
}
