@page "/"
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject UserService UserService
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid Spacing="3" Class="pa-3">
        <!-- Header
        <MudItem xs="12">
            <MudLink Href="https://agusandelsur.gov.ph/" Target="_blank" Underline="Underline.None">
                <MudPaper>
                    <MudStack Row Class="pa-2">
                        <MudGrid>
                            <MudItem xs="12" lg="8">
                                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
                                    <MudImage Fluid="true" Width="120" Src="Objects/Agusan del Sur Logo.webp"></MudImage>
                                    <MudStack Spacing="0">
                                        <MudText>
                                            Republic of the Philippines
                                        </MudText>
                                        <MudDivider />
                                        <MudText Style="font-size: 30px">
                                            <b>Province of Agusan del Sur</b>
                                        </MudText>
                                    </MudStack>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" lg="4">
                                <MudStack Row Class="justify-lg-end justify-xs-center">
                                    <MudImage Fluid="true" Width="120" Src="Objects/PH Seal of Transparency.webp"></MudImage>
                                    <MudImage Fluid="true" Width="120" Src="Objects/PH Coat of Arms.webp"></MudImage>
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>
        <MudDivider />

         -->
        <!-- Gov Images -->
        <MudItem xs="12">
            <MudGrid Spacing="2" Justify="Justify.Center">
                <MudVirtualize Items="images" Context="image">
                    <MudItem xs="4" lg="3">
                        <MudImage Style="max-height: 100%; height: auto; max-width: 100%; width: auto"
                                  Fluid
                                  data-infinite="true"
                                  Class="spotlight cursor-pointer rounded"
                                  Src="@($"Uploads/{image.file_name}")" />
                    </MudItem>
                </MudVirtualize>
            </MudGrid>
        </MudItem>

        <MudDivider />

        <!-- Praise Messages -->
        <MudItem xs="12" lg="8">
            <MudGrid Spacing="1">
                <!-- Header -->
                <MudItem xs="12">
                    <MudPaper Outlined>
                        <MudStack Class="pa-2" Spacing="0" AlignItems="AlignItems.Center">
                            <MudText Align="Align.Center"><b>Praise Messages</b></MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Content -->
                <MudItem xs="12">
                    <MudStack Spacing="3" Justify="Justify.Center">
                        @if (paginatedMessages != null && paginatedMessages.Count > 0)
                        {
                            <MudVirtualize Items="paginatedMessages" Context="message">
                                <MudPaper Class="pa-2 mb-2" Outlined>
                                    @{
                                        var employeeSender = pgasEmployees?.FirstOrDefault(e => e.eid == message.from_eid);
                                        var employeeRecipient = pgasEmployees?.FirstOrDefault(e => e.eid == message.to_eid);
                                    }
                                    <MudStack Row>

                                        <MudTooltip>
                                            <ChildContent>
                                                <MudAvatar Size="Size.Large">
                                                    <MudImage Style="image-rendering: optimizeSpeed"
                                                              Src="@($"https://pgas.ph/hris/Content/images/photos/{message.from_eid}.png")"
                                                              onerror="this.onerror=null;this.src='Objects/agusan del sur.webp';">
                                                    </MudImage>
                                                </MudAvatar>
                                            </ChildContent>
                                            <TooltipContent>
                                                <MudStack Row>
                                                    <MudAvatar Size="Size.Large">
                                                        <MudImage Style="image-rendering: optimizeSpeed"
                                                                  Src="@($"https://pgas.ph/hris/Content/images/photos/{message.from_eid}.png")"
                                                                  onerror="this.onerror=null;this.src='Objects/agusan del sur.webp';">
                                                        </MudImage>
                                                    </MudAvatar>
                                                    <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center">
                                                        <MudText><b>@employeeSender?.EmployeeName</b></MudText>
                                                        <MudText Style="font-size: 12px">@employeeSender?.Position</MudText>
                                                        <MudText Style="font-size: 12px">@employeeSender?.OfficeName</MudText>
                                                    </MudStack>
                                                </MudStack>
                                            </TooltipContent>
                                        </MudTooltip>
                                        <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center">
                                            <!-- sender to recipient -->
                                            <MudStack Row Style="width: 100%" Wrap="Wrap.Wrap" Spacing="1">
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudText Style="font-size: 14px"><b>@employeeSender?.EmployeeName (@employeeSender?.OfficeAbbr)</b></MudText>
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        <MudStack Row>
                                                            <MudAvatar Size="Size.Large">
                                                                <MudImage Style="image-rendering: optimizeSpeed"
                                                                          Src="@($"https://pgas.ph/hris/Content/images/photos/{message.from_eid}.png")"
                                                                          onerror="this.onerror=null;this.src='Objects/agusan del sur.webp';">
                                                                </MudImage>
                                                            </MudAvatar>
                                                            <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center">
                                                                <MudText><b>@employeeSender?.EmployeeName</b></MudText>
                                                                <MudText Style="font-size: 12px">@employeeSender?.Position</MudText>
                                                                <MudText Style="font-size: 12px">@employeeSender?.OfficeName</MudText>
                                                            </MudStack>
                                                        </MudStack>
                                                    </TooltipContent>
                                                </MudTooltip>
                                                <!-- to -->
                                                <MudText Style="font-size: 14px">to</MudText>

                                                <!-- recipient -->
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudText Style="font-size: 14px"><b>@employeeRecipient?.EmployeeName (@employeeRecipient?.OfficeAbbr)</b></MudText>
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        <MudStack Row>
                                                            <MudAvatar Size="Size.Large">
                                                                <MudImage Style="image-rendering: optimizeSpeed"
                                                                          Src="@($"https://pgas.ph/hris/Content/images/photos/{message.to_eid}.png")"
                                                                          onerror="this.onerror=null;this.src='Objects/agusan del sur.webp';">
                                                                </MudImage>
                                                            </MudAvatar>
                                                            <MudStack Spacing="0" AlignItems="AlignItems.Start" Justify="Justify.Center">
                                                                <MudText><b>@employeeRecipient?.EmployeeName</b></MudText>
                                                                <MudText Style="font-size: 12px">@employeeRecipient?.Position</MudText>
                                                                <MudText Style="font-size: 12px">@employeeRecipient?.OfficeName</MudText>
                                                            </MudStack>
                                                        </MudStack>
                                                    </TooltipContent>
                                                </MudTooltip>
                                            </MudStack>
                                            <MudTooltip Text="@(message.date?.ToString("MMMM dd, yyyy hh:mm tt") ?? "No Date")">
                                                <MudText Style="font-size: 10px">@(message.date?.ToString("MMMM dd 'at' hh:mm tt") ?? "No Date")</MudText>
                                            </MudTooltip>
                                            <MudRating ReadOnly Size="Size.Small" SelectedValue="@message.stars" />
                                        </MudStack>
                                    </MudStack>
                                    <MudPaper Class="pa-1" Elevation="0">
                                        <MudText>@message.message</MudText>
                                    </MudPaper>
                                    <MudStack Row Justify="Justify.SpaceBetween">
                                    </MudStack>
                                </MudPaper>
                            </MudVirtualize>
                            <MudStack Row Justify="Justify.Center">
                                <MudPagination ShowFirstButton ShowLastButton Count="@totalPages" SelectedChanged="OnPageChanged" />
                            </MudStack>
                        }
                        else
                        {
                            <MudText>No messages available.</MudText>
                        }
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudDivider />

        <!-- Downloadble Forms -->
        <MudItem xs="12">
            <MudGrid Spacing="1">
                <!-- Header -->
                <MudItem xs="12">
                    <MudPaper Outlined>
                        <MudStack Class="pa-2" Spacing="0" AlignItems="AlignItems.Center">
                            <MudText Align="Align.Center"><b>Downloadble Forms</b></MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Content -->
                <MudItem xs="12">
                    <MudStack Class="pa-2">
                        <MudStack Row Class="flex-wrap" Spacing="5" Justify="Justify.Center">
                            @foreach (var documentName in documentNames)
                            {
                                <MudPaper Outlined>
                                    <MudButton Size="Size.Small" StartIcon="@Icons.Custom.FileFormats.FileDocument" IconColor="Color.Info" Target="_blank" Href="@($"Documents/{@documentName}.doc")">@documentName</MudButton>
                                </MudPaper>
                            }
                            @foreach (var excelDocumentName in excelDocumentNames)
                            {
                                <MudPaper Outlined>
                                    <MudButton Size="Size.Small" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Success" Target="_blank" Href="@($"Documents/{@excelDocumentName}.xlsx")">@excelDocumentName</MudButton>
                                </MudPaper>
                            }
                        </MudStack>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    // Get API URL
    private readonly string API_URL = APIService.PGASePortalAPI;
    private List<ePortal_employee>? pgasEmployees;
    private List<praise_message>? praiseMessages;
    private List<carousel_image>? images;
    private List<praise_message>? paginatedMessages;
    private int pageSize = 5; // Adjust as needed
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)(praiseMessages?.Count ?? 0) / pageSize);
    private bool? isDarkMode;
    private List<string> documentNames = new List<string>
    {
        "Accounting Clearance",
        "Allocation of Maternity Leave",
        "Leave Application Form",
        "Library Clearance",
        "Tambayayong Award Nomination Form",
        "Treasurer Clearance",
        "Trip Ticket",
        "Ulirang Kawani Nomination Form"
    };

    private List<string> excelDocumentNames = new List<string>
    {
        "CS Form No7 ClearanceForm",
        "Disbursement Voucher (DV)",
        "Personal Data Sheet (PDS) - CSC Form 212 Revised 2017",
        "Itinerary of Travel",
        "Liquidation Report",
        "Obligation Request (OBR)",
        "Official Business Authorization Slip (OBAS)",
        "Pass - Compensatory Service Slip (PASCO)",
        "Purchase Request (PR)",
        "Reimbursement Expense Receipt",
        "Request Slip"
    };

    public class ePortal_employee
    {
        public long? eid { get; set; }
        public string? SwipeID { get; set; }
        public string? OfficeName { get; set; }
        public string? OfficeAbbr { get; set; }
        public string? EmployeeName { get; set; }
        public string? Position { get; set; }
        public int? SG { get; set; }
        public string? Status { get; set; }
        public bool? isactive { get; set; }
    }

    public partial class praise_message
    {
        public int id { get; set; }
        public long from_eid { get; set; }
        public long to_eid { get; set; }
        public string? message { get; set; }
        public int stars { get; set; }
        public DateTime? date { get; set; }
        public bool? archive { get; set; }
    }

    public partial class carousel_image
    {
        public string? file_name { get; set; }
        public DateTime? upload_date { get; set; }
        public bool IsEnlarged { get; set; } = false;
    }

    // Initialization method to fetch data and update UI elements
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await loadPraiseMessages();
            await LoadEmployees();
            await LoadCarousel();
            isDarkMode = await UserService.GetDarkModeAsync();
            UserService.OnThemeChanged += HandleThemeChangedAsync;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        finally
        {
            await base.OnInitializedAsync();
        }
    }

    private async Task HandleThemeChangedAsync()
    {
        isDarkMode = await UserService.GetDarkModeAsync(); // Ensure state is updated
        StateHasChanged();
    }

    public void Dispose()
    {
        UserService.OnThemeChanged -= HandleThemeChangedAsync;
    }

    private async Task loadPraiseMessages()
    {
        try
        {
            using HttpClient httpClient = new();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/praise_message/GetAllPraiseMessages");
            httpResponse.EnsureSuccessStatusCode();

            string jsonResponse = await httpResponse.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            praiseMessages = JsonSerializer.Deserialize<List<praise_message>>(jsonResponse, options);
            UpdatePaginatedMessages();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void UpdatePaginatedMessages()
    {
        paginatedMessages = praiseMessages?
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnPageChanged(int page)
    {
        currentPage = page;
        UpdatePaginatedMessages();
    }

    private async Task LoadEmployees()
    {
        try
        {
            using HttpClient httpClient = new();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/ePortal_employee");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            pgasEmployees = await JsonSerializer.DeserializeAsync<List<ePortal_employee>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task LoadCarousel()
    {
        try
        {
            using HttpClient httpClient = new();
            HttpResponseMessage httpResponse = await httpClient.GetAsync($"{API_URL}/api/carousel_image/images");
            httpResponse.EnsureSuccessStatusCode();

            using var responseStream = await httpResponse.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            images = await JsonSerializer.DeserializeAsync<List<carousel_image>>(responseStream, options);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}
